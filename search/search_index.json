{"config":{"lang":["nl"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LHM-Ribasim","text":"<p>Het Landelijk Hydrologisch Model (LHM) op basis van Local Surface Water (LSW) eenheden en het netwerk van het DistributieModel (DM) voor Ribasim.jl</p> <p></p> <p>Documentatie: https://d2hydro.github.io/lhm-ribasim</p> <p>Broncode: https://github.com/d2hydro/lhm-ribasim</p>"},{"location":"#auteurs","title":"Auteurs","text":""},{"location":"#inleiding","title":"Inleiding","text":""},{"location":"get_started/","title":"Gebruikershandleiding","text":""},{"location":"get_started/#downloaden-data","title":"Downloaden data","text":"<ul> <li>Download de bestanden van Deltares-ftp in <code>path\\naar\\de\\repos\\data</code>. Zie voor de juiste structuur en beschrijving: https://github.com/d2hydro/lhm-ribasim/tree/main/data</li> </ul> <p>## Runnen test-model  - Installeer RIBASIM volgens de handleiding. Unzip de inhoud van ribasim_cli.zip in de root van de resporitory, <code>path\\naar\\de\\repos\\ribasim_cli</code>.  - Run het test-model in een cmd met <code>path\\naar\\de\\repos\\scripts\\run_test_model.cmd</code>. Dit levert het volgende resultaat:</p> <p></p> <p>## Opzetten Python environment  - Bouw je environment met https://github.com/d2hydro/lhm-ribasim/blob/main/envs/environment_dev_spyder.yml - Clone de Deltares RIBASIM repository: https://github.com/Deltares/Ribasim - Run in de geactiveerde conda-environment <code>pip install -e .</code> in de ribasim repository in de sub-folder <code>python\\ribasim</code> (je vindt daar en pyproject.toml file)</p>"},{"location":"notebooks/bouw_lhm_topology/","title":"Bouw LHM topologie","text":"In\u00a0[1]: Copied! <pre>from config import DATA_DIR, LKM25_DIR, MOZART_DIR, LHM_DIR, LSW_DIR, LSM_KOPPELING_DIR, load_src\nimport geopandas as gpd\nload_src()\n\nfrom lhm.read import read_lsm_lhm, read_lsw_routing, read_dw_keys\nfrom lhm.lsm import snap_to_waterbodies\nfrom lhm.lsw import lsw_end_nodes, lsw_network\n</pre> from config import DATA_DIR, LKM25_DIR, MOZART_DIR, LHM_DIR, LSW_DIR, LSM_KOPPELING_DIR, load_src import geopandas as gpd load_src()  from lhm.read import read_lsm_lhm, read_lsw_routing, read_dw_keys from lhm.lsm import snap_to_waterbodies from lhm.lsw import lsw_end_nodes, lsw_network In\u00a0[2]: Copied! <pre>lsw_routing_dik = MOZART_DIR / r\"mozartin/lswrouting.dik\"\nlsw_routing_df = read_lsw_routing(lsw_routing_dik)\nlsw_gdf = gpd.read_file(LSW_DIR / \"lsws.shp\")\n\nlsw_gdf = lsw_gdf.dissolve(by=\"LSWFINAL\").reset_index()\nlsw_links_gdf, lsw_nodes_gdf = lsw_network(lsw_gdf, lsw_routing_df)\n</pre> lsw_routing_dik = MOZART_DIR / r\"mozartin/lswrouting.dik\" lsw_routing_df = read_lsw_routing(lsw_routing_dik) lsw_gdf = gpd.read_file(LSW_DIR / \"lsws.shp\")  lsw_gdf = lsw_gdf.dissolve(by=\"LSWFINAL\").reset_index() lsw_links_gdf, lsw_nodes_gdf = lsw_network(lsw_gdf, lsw_routing_df) In\u00a0[3]: Copied! <pre>lsw_end_nodes_gdf = lsw_end_nodes(lsw_links_gdf, lsw_gdf)\nprint(f\"we moeten {len(lsw_end_nodes_gdf)} koppelen aan DM-knopen\")\nlsw_end_nodes_gdf.explore()\n</pre> lsw_end_nodes_gdf = lsw_end_nodes(lsw_links_gdf, lsw_gdf) print(f\"we moeten {len(lsw_end_nodes_gdf)} koppelen aan DM-knopen\") lsw_end_nodes_gdf.explore() <pre>we moeten 2309 koppelen aan DM-knopen\n</pre> Out[3]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[4]: Copied! <pre>dw_key_file = LHM_DIR / r\"dm/txtfiles_git/dwkeys.txt\"\n\ndw_keys_df = read_dw_keys(dw_key_file)\nlsw_dm_links = []\n\nfor dw, df in dw_keys_df.groupby(by=[\"oid\"]):\n    dm_nodes = df.loc[df.kty == \"d\"].nid.unique()\n    if len(dm_nodes) == 1:\n        df = lsw_end_nodes_gdf[lsw_end_nodes_gdf[\"DWRN\"] == dw[0]]\n        for row in df.itertuples():\n            lsw_dm_links += [(row.LSWFINAL, dm_nodes[0])]\n\nprint(f\"{len(lsw_dm_links)} LSWs gekoppeld aan DM-knopen\")\nlsw_end_nodes_gdf = lsw_end_nodes_gdf.loc[~lsw_end_nodes_gdf.LSWFINAL.isin([i[0] for i in lsw_dm_links])]\nprint(f\"We moeten nog {len(lsw_end_nodes_gdf)} koppelen aan DM-knopen\")\nlsw_end_nodes_gdf.explore()\n</pre> dw_key_file = LHM_DIR / r\"dm/txtfiles_git/dwkeys.txt\"  dw_keys_df = read_dw_keys(dw_key_file) lsw_dm_links = []  for dw, df in dw_keys_df.groupby(by=[\"oid\"]):     dm_nodes = df.loc[df.kty == \"d\"].nid.unique()     if len(dm_nodes) == 1:         df = lsw_end_nodes_gdf[lsw_end_nodes_gdf[\"DWRN\"] == dw[0]]         for row in df.itertuples():             lsw_dm_links += [(row.LSWFINAL, dm_nodes[0])]  print(f\"{len(lsw_dm_links)} LSWs gekoppeld aan DM-knopen\") lsw_end_nodes_gdf = lsw_end_nodes_gdf.loc[~lsw_end_nodes_gdf.LSWFINAL.isin([i[0] for i in lsw_dm_links])] print(f\"We moeten nog {len(lsw_end_nodes_gdf)} koppelen aan DM-knopen\") lsw_end_nodes_gdf.explore() <pre>1784 LSWs gekoppeld aan DM-knopen\nWe moeten nog 525 koppelen aan DM-knopen\n</pre> Out[4]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[5]: Copied! <pre>lsm3_locations_csv = LSM_KOPPELING_DIR / \"LSM3_locations.csv\"\nknoop_district_csv = LSM_KOPPELING_DIR / \"LSM3_DMKnoopDistrict_childs.csv\"\nlsm_lhm_gdf = read_lsm_lhm(lsm3_locations_csv, knoop_district_csv)\n\nlsm_lhm_gdf.explore()\n</pre> lsm3_locations_csv = LSM_KOPPELING_DIR / \"LSM3_locations.csv\" knoop_district_csv = LSM_KOPPELING_DIR / \"LSM3_DMKnoopDistrict_childs.csv\" lsm_lhm_gdf = read_lsm_lhm(lsm3_locations_csv, knoop_district_csv)  lsm_lhm_gdf.explore() Out[5]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[6]: Copied! <pre>lkm_waterlichamen_shp = LKM25_DIR / \"KRW-waterlichamen_SGBP3.shp\"\nlkm_waterlichamen_gdf = gpd.read_file(lkm_waterlichamen_shp)\nlsm_lhm_snapped_gdf = snap_to_waterbodies(lsm_lhm_gdf, lkm_waterlichamen_gdf, offset=250)\n\nlkm_links_shp = LKM25_DIR / \"LKM25_Links.shp\"\nlkm_links_gdf = gpd.read_file(lkm_links_shp)\n</pre> lkm_waterlichamen_shp = LKM25_DIR / \"KRW-waterlichamen_SGBP3.shp\" lkm_waterlichamen_gdf = gpd.read_file(lkm_waterlichamen_shp) lsm_lhm_snapped_gdf = snap_to_waterbodies(lsm_lhm_gdf, lkm_waterlichamen_gdf, offset=250)  lkm_links_shp = LKM25_DIR / \"LKM25_Links.shp\" lkm_links_gdf = gpd.read_file(lkm_links_shp) <p>ToDo: Deze code netjes verwerken in een functie</p> In\u00a0[8]: Copied! <pre>from shapely.geometry import Point\nfrom lhm.dm import get_dm_nodes\n\nif lsw_gdf.index.name !=\"LSWFINAL\":\n    lsw_gdf.set_index(\"LSWFINAL\", inplace=True)\ninit = len(lsw_dm_links)\n\ndef report_progress(iteration, total, interval=10):\n    percent = (iteration / total) * 100\n    progress = int(percent / interval)\n    line = '[' + '#' * progress + ' ' * (int(100 / interval) - progress) + ']'\n    print(f'{line} {percent:.1f}% completed', end='\\r')\n\ndef find_links(row, lsw_id): # algemene functie om links te vinden mbv een LKM link\n    lsw_dm_links = [] \n    polygon = lsw_gdf.at[lsw_id, \"geometry\"]\n    df = lsm_lhm_gdf[lsm_lhm_gdf.within(polygon)]# we kijken of er lateralen in het gebied van de LSW liggen\n   \n    if not df.empty:\n        lsw_dm_links +=[(lsw_id, i) for i in df.DM.unique()]\n   \n    if row.nodeto.startswith(\"LSM\"): # de link moet starten met LSM\n        point = Point(row.geometry.bounds[2:]) # de Point van de nodeto\n        waterlichaam_gdf = lkm_waterlichamen_gdf[lkm_waterlichamen_gdf.intersects(point)] # het waterlichaam waar punt op snapt\n       \n        if not waterlichaam_gdf.empty: # er moet w\u00e9l een waterlichaam gevonden worden\n            waterlichaam = waterlichaam_gdf.iloc[0] # dan pakken we het eerste waterlichaam (als het goed is is de lengte altijd 1)\n            df = lsm_lhm_snapped_gdf[lsm_lhm_snapped_gdf.within(waterlichaam.geometry)] # we zoeken naar lsm_lhm laterale knopen binnen het waterlichaam\n            df = lsm_lhm_snapped_gdf[lsm_lhm_snapped_gdf.within(waterlichaam.geometry)]\n            \n            if not df.empty: # we hebben gevonden!\n                lsw_dm_links = [(lsw_id, i) for i in df.DM.unique()] # hier maken we links van de lsw_id naar de unieke DM-knopen   \n                lsw_dm_links = [i for i in lsw_dm_links if i[1] in dm_nodes_stringified]\n    \n    return lsw_dm_links\nall_links = []\n\nfor idx, row in enumerate(lsw_end_nodes_gdf.itertuples()):\n    report_progress(idx, len(lsw_end_nodes_gdf))\n    lsw_id = row.LSWFINAL\n    district = row.DWRN\n    dm_nodes = get_dm_nodes(dw_keys_df,district)\n    dm_nodes_stringified = [str(i) for i in dm_nodes]\n    lkm_links_iter = lkm_links_gdf[lkm_links_gdf.nodefrom == str(lsw_id)].itertuples() \n   \n    for row in lkm_links_iter:\n        links = []\n        links = find_links(row, lsw_id) \n      \n        if (not links):\n            counter = 0\n         \n            while (not links) and (counter &lt; 10) :\n                df = lkm_links_gdf[lkm_links_gdf.nodefrom == row.nodeto]\n             \n                if not df.empty:\n                    row = df.iloc[0]\n                    links = find_links(row, lsw_id)\n                counter += 1\n        \n        all_links += [i for i in links if i not in all_links]\n\nall_links\nlsw_dm_links += all_links\nprint(f\"{len(all_links)} LSWs koppelingen gemaakt aan DM-knopen\") \nlsw_end_nodes_gdf = lsw_end_nodes_gdf.loc[~lsw_end_nodes_gdf.LSWFINAL.isin([i[0] for i in all_links])]\nprint(f\"We moeten {len(lsw_end_nodes_gdf)} koppelen aan DM-knopen\")\nlsw_end_nodes_gdf.explore()\n</pre> from shapely.geometry import Point from lhm.dm import get_dm_nodes  if lsw_gdf.index.name !=\"LSWFINAL\":     lsw_gdf.set_index(\"LSWFINAL\", inplace=True) init = len(lsw_dm_links)  def report_progress(iteration, total, interval=10):     percent = (iteration / total) * 100     progress = int(percent / interval)     line = '[' + '#' * progress + ' ' * (int(100 / interval) - progress) + ']'     print(f'{line} {percent:.1f}% completed', end='\\r')  def find_links(row, lsw_id): # algemene functie om links te vinden mbv een LKM link     lsw_dm_links = []      polygon = lsw_gdf.at[lsw_id, \"geometry\"]     df = lsm_lhm_gdf[lsm_lhm_gdf.within(polygon)]# we kijken of er lateralen in het gebied van de LSW liggen         if not df.empty:         lsw_dm_links +=[(lsw_id, i) for i in df.DM.unique()]         if row.nodeto.startswith(\"LSM\"): # de link moet starten met LSM         point = Point(row.geometry.bounds[2:]) # de Point van de nodeto         waterlichaam_gdf = lkm_waterlichamen_gdf[lkm_waterlichamen_gdf.intersects(point)] # het waterlichaam waar punt op snapt                 if not waterlichaam_gdf.empty: # er moet w\u00e9l een waterlichaam gevonden worden             waterlichaam = waterlichaam_gdf.iloc[0] # dan pakken we het eerste waterlichaam (als het goed is is de lengte altijd 1)             df = lsm_lhm_snapped_gdf[lsm_lhm_snapped_gdf.within(waterlichaam.geometry)] # we zoeken naar lsm_lhm laterale knopen binnen het waterlichaam             df = lsm_lhm_snapped_gdf[lsm_lhm_snapped_gdf.within(waterlichaam.geometry)]                          if not df.empty: # we hebben gevonden!                 lsw_dm_links = [(lsw_id, i) for i in df.DM.unique()] # hier maken we links van de lsw_id naar de unieke DM-knopen                    lsw_dm_links = [i for i in lsw_dm_links if i[1] in dm_nodes_stringified]          return lsw_dm_links all_links = []  for idx, row in enumerate(lsw_end_nodes_gdf.itertuples()):     report_progress(idx, len(lsw_end_nodes_gdf))     lsw_id = row.LSWFINAL     district = row.DWRN     dm_nodes = get_dm_nodes(dw_keys_df,district)     dm_nodes_stringified = [str(i) for i in dm_nodes]     lkm_links_iter = lkm_links_gdf[lkm_links_gdf.nodefrom == str(lsw_id)].itertuples()          for row in lkm_links_iter:         links = []         links = find_links(row, lsw_id)                 if (not links):             counter = 0                       while (not links) and (counter &lt; 10) :                 df = lkm_links_gdf[lkm_links_gdf.nodefrom == row.nodeto]                               if not df.empty:                     row = df.iloc[0]                     links = find_links(row, lsw_id)                 counter += 1                  all_links += [i for i in links if i not in all_links]  all_links lsw_dm_links += all_links print(f\"{len(all_links)} LSWs koppelingen gemaakt aan DM-knopen\")  lsw_end_nodes_gdf = lsw_end_nodes_gdf.loc[~lsw_end_nodes_gdf.LSWFINAL.isin([i[0] for i in all_links])] print(f\"We moeten {len(lsw_end_nodes_gdf)} koppelen aan DM-knopen\") lsw_end_nodes_gdf.explore() <pre>457 LSWs koppelingen gemaakt aan DM-knopen\nWe moeten 193 koppelen aan DM-knopen\n</pre> Out[8]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook <p>Locatie DM knopen inlezen</p> In\u00a0[9]: Copied! <pre># Define the shapefile paths\nDM_nodes_shp = LHM_DIR / r\"dm/data_dvc/DM_nodes.shp\"\nDM_links_shp = LHM_DIR / r\"dm/data_dvc/DM_links.shp\"\n\n# Read each shapefile separately\nDM_nodes_gdf = gpd.read_file(DM_nodes_shp)\nDM_links_gdf = gpd.read_file(DM_links_shp)\nDM_nodes_gdf.columns = [i.strip() for i in DM_nodes_gdf.columns]\nDM_links_gdf.columns = [i.strip() for i in DM_links_gdf.columns]\n\n# Calculate the closest distance LSW endpoints and DM\nall_links = []\nfor row in lsw_end_nodes_gdf.itertuples():\n    lsw_id = row.LSWFINAL\n    district = row.DWRN\n    dm_nodes = get_dm_nodes(dw_keys_df,district)\n    dm_nodes = [str(i) for i in dm_nodes]\n\n    dm_node = DM_nodes_gdf.at[DM_nodes_gdf.loc[DM_nodes_gdf.ID.isin(dm_nodes)].distance(row.geometry).sort_values().index[0], \"ID\"]\n\n    all_links += [(lsw_id, int(dm_node))]\n\nlsw_dm_links += all_links\nprint(f\"{len(all_links)} LSWs koppelingen gemaakt aan DM-knopen\") \nlsw_end_nodes_gdf = lsw_end_nodes_gdf.loc[~lsw_end_nodes_gdf.LSWFINAL.isin([i[0] for i in all_links])]\nprint(f\"We moeten {len(lsw_end_nodes_gdf)} koppelen aan DM-knopen\")\n</pre> # Define the shapefile paths DM_nodes_shp = LHM_DIR / r\"dm/data_dvc/DM_nodes.shp\" DM_links_shp = LHM_DIR / r\"dm/data_dvc/DM_links.shp\"  # Read each shapefile separately DM_nodes_gdf = gpd.read_file(DM_nodes_shp) DM_links_gdf = gpd.read_file(DM_links_shp) DM_nodes_gdf.columns = [i.strip() for i in DM_nodes_gdf.columns] DM_links_gdf.columns = [i.strip() for i in DM_links_gdf.columns]  # Calculate the closest distance LSW endpoints and DM all_links = [] for row in lsw_end_nodes_gdf.itertuples():     lsw_id = row.LSWFINAL     district = row.DWRN     dm_nodes = get_dm_nodes(dw_keys_df,district)     dm_nodes = [str(i) for i in dm_nodes]      dm_node = DM_nodes_gdf.at[DM_nodes_gdf.loc[DM_nodes_gdf.ID.isin(dm_nodes)].distance(row.geometry).sort_values().index[0], \"ID\"]      all_links += [(lsw_id, int(dm_node))]  lsw_dm_links += all_links print(f\"{len(all_links)} LSWs koppelingen gemaakt aan DM-knopen\")  lsw_end_nodes_gdf = lsw_end_nodes_gdf.loc[~lsw_end_nodes_gdf.LSWFINAL.isin([i[0] for i in all_links])] print(f\"We moeten {len(lsw_end_nodes_gdf)} koppelen aan DM-knopen\") <pre>193 LSWs koppelingen gemaakt aan DM-knopen\nWe moeten 0 koppelen aan DM-knopen\n</pre> In\u00a0[10]: Copied! <pre>from shapely.geometry import LineString\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nlsw_dm_links_gdf = gpd.GeoDataFrame(lsw_dm_links, columns = [\"node_from\", \"node_to\"], geometry = gpd.GeoSeries(), crs=28992)\n\ndef make_line_string(row):\n    report_progress(row._name, len(lsw_dm_links_gdf))\n    point_from = lsw_nodes_gdf.loc[row.node_from]\n    point_to = DM_nodes_gdf.loc[DM_nodes_gdf.ID == str(row.node_to)].geometry\n    return LineString([[point_from.x, point_from.y], [point_to.x, point_to.y]])\n\nlsw_dm_links_gdf.loc[:, \"geometry\"] = lsw_dm_links_gdf.apply((lambda x: make_line_string(x)), axis=1)\n\nlsw_dm_links_gdf[\"node_from\"] = lsw_dm_links_gdf[\"node_from\"].astype(str)\nlsw_dm_links_gdf[\"node_to\"] = lsw_dm_links_gdf[\"node_to\"].astype(str)\n</pre> from shapely.geometry import LineString import warnings warnings.simplefilter(action='ignore', category=FutureWarning) lsw_dm_links_gdf = gpd.GeoDataFrame(lsw_dm_links, columns = [\"node_from\", \"node_to\"], geometry = gpd.GeoSeries(), crs=28992)  def make_line_string(row):     report_progress(row._name, len(lsw_dm_links_gdf))     point_from = lsw_nodes_gdf.loc[row.node_from]     point_to = DM_nodes_gdf.loc[DM_nodes_gdf.ID == str(row.node_to)].geometry     return LineString([[point_from.x, point_from.y], [point_to.x, point_to.y]])  lsw_dm_links_gdf.loc[:, \"geometry\"] = lsw_dm_links_gdf.apply((lambda x: make_line_string(x)), axis=1)  lsw_dm_links_gdf[\"node_from\"] = lsw_dm_links_gdf[\"node_from\"].astype(str) lsw_dm_links_gdf[\"node_to\"] = lsw_dm_links_gdf[\"node_to\"].astype(str) <pre>[######### ] 100.0% completed\r</pre> In\u00a0[11]: Copied! <pre>import folium\n#m = lsw_gdf.explore(name=\"lsws\", color=\"lightgrey\")\nm = lsw_links_gdf.explore(name=\"lsw links\", color=\"blue\")\nm = lsw_dm_links_gdf.explore(m=m, name=\"lsw-dm links\", color=\"green\")\nm = DM_links_gdf.explore(m=m, name=\"dm links\", color=\"red\")\n\nfolium.LayerControl().add_to(m)\n\nm\n</pre> import folium #m = lsw_gdf.explore(name=\"lsws\", color=\"lightgrey\") m = lsw_links_gdf.explore(name=\"lsw links\", color=\"blue\") m = lsw_dm_links_gdf.explore(m=m, name=\"lsw-dm links\", color=\"green\") m = DM_links_gdf.explore(m=m, name=\"dm links\", color=\"red\")  folium.LayerControl().add_to(m)  m Out[11]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"notebooks/bouw_lhm_topology/#issue-geen-directe-koppeling-gevonden-tussen-lsws-en-dm-via-lkm-daarom-hebben-we-gekozen-voor-de-volgende-methode","title":"Issue: Geen directe koppeling gevonden tussen LSW's en DM via LKM. Daarom hebben we gekozen voor de volgende methode.\u00b6","text":""},{"location":"notebooks/bouw_lhm_topology/#methode-om-lsws-te-linken-aan-dm","title":"Methode om LSW's te linken aan DM:\u00b6","text":"<ol> <li><p>We vinden LSW eindpunten door routing van LSM links. Aanname:</p> <ul> <li>We gaan ervan uit dat LSWs die afwateren op andere LSWs n\u00edet tevens afwateren op het DM.</li> </ul> <p>Resultaat: 2309 LSW eindpunten moeten gekoppeld worden aan DM knopen</p> </li> <li><p>We checken welke LSW eindpunten gekoppeld zijn aan slechts 1 DM knoop en koppelen deze direct aan de bijbehorende DM-knoop via dwkeys. Methode:</p> <ul> <li>Check voor iedere LSW eindpunt het bijbehorende district</li> <li>Check welke districten aan slechts 1 DM-knoop worden gekoppeld door uitlezen van dwkeys.txt</li> </ul> <p>Resultaat: 1784 LSWs gekoppeld aan DM-knopen</p> </li> <li><p>De niet gekoppelde LSW eindpunten worden door LSM-lateralen aan DM gekoppeld: Data:</p> <ul> <li>We hebben een routing LKM file (LKM25_links) die de afvoerrichting naar LKM netwerk weergeeft (blauwe pijlen in de figuur)</li> <li>We hebben een LKM waterlichamen file (lkm_waterlichamen_shp) (rode polygonen in de figuur)</li> <li>We hebben een LSM3 lateraal file (LSM3_DMKnoopDistrict_childs.csv) die aangeeft welke LSM3 lateral aan DM knoop is gekoppeld (groene punten in de figuur)</li> </ul> <p>Methode:</p> <ol> <li>We volgen de routing in de LKM file van de LSW eindpunten tot deze uitkomt in een LKM waterlichaam.</li> <li>We zoeken de dichtsbijzijnde LSM3 lateraal van het LKM waterlichaam</li> <li>We lezen de bijbehorende DM knoop uit de LSM3_DMKnoopDistrict_childs.csv</li> </ol> <p>Resultaat: 457 LSWs koppelingen gemaakt aan DM-knopen</p> <p></p> </li> <li><p>De LSW eindpunten die overblijven (193) koppelen we aan de dichtsbijzijnde DM-knoop</p> </li> </ol>"},{"location":"notebooks/bouw_lhm_topology/#1-we-vinden-lsw-eindpunten-door-routing-van-lsm-links","title":"1. We vinden LSW eindpunten door routing van LSM links\u00b6","text":"<p>Vanuit de geleverde <code>lsws.shp</code> en <code>lswrouting.dik</code> maken we een netwerk van LSWs.</p>"},{"location":"notebooks/bouw_lhm_topology/#vinden-niet-gekoppelde-lsws-eindpunt-lsws","title":"Vinden niet-gekoppelde LSWs: Eindpunt LSW's\u00b6","text":"<p>We gaan ervan uit dat LSWs die afwateren op andere LSWs n\u00edet tevens afwateren op het DM. We gaan vanaf dit punt LSWs die niet gekoppeld zijn aan andere LSWs koppelen aan het DM. Hieronder tonen we deze LSWs op de kaart</p>"},{"location":"notebooks/bouw_lhm_topology/#2-we-checken-welke-lsw-eindpunten-gekoppeld-zijn-aan-slechts-1-dm-knoop-en-koppelen-deze-direct-aan-de-bijbehorende-dm-knoopkoppelen-via-dw-keys","title":"2. We checken welke LSW eindpunten gekoppeld zijn aan slechts 1 DM knoop en koppelen deze direct aan de bijbehorende DM-knoopKoppelen via DW-keys\u00b6","text":"<p>Vanuit <code>dwkeys.txt</code>kunnen we per district kijken aan welke DM knoop wordt gekoppeld. Wanneer een district slechts koppelt aan 1 DM-knoop, dan betekent dit dat alle LSWs in dit district gekoppeld moeten worden aan deze knoop.</p> <p>We doen dit en tonen de overgebleven nog niet gekoppelde LSWs.</p>"},{"location":"notebooks/bouw_lhm_topology/#3-de-niet-gekoppelde-lsw-eindpunten-worden-door-lsm-lateralen-aan-dm-gekoppeld","title":"3. De niet gekoppelde LSW eindpunten worden door LSM-lateralen aan DM gekoppeld:\u00b6","text":""},{"location":"notebooks/bouw_lhm_topology/#koppelen-lsm-lateralen-aan-het-dm","title":"Koppelen LSM lateralen aan het DM\u00b6","text":"<p>Vanuit de bestanden <code>LSM3_locations.csv</code>, <code>LSM3_DMKnoopDistrict_childs.csv</code> kunnen we uitzoeken hoe aan welke DM-knoop een LSM-lateraal is gekoppeld. Een LSM-lateraal ligt meestal vrij netjes in het watersysteem geschematiseerd.</p>"},{"location":"notebooks/bouw_lhm_topology/#koppelen-lsw-via-lsm-lateralen-aan-dm","title":"Koppelen LSW via LSM-lateralen aan DM\u00b6","text":"<p>Voor de nog overgebleven LSWs zoeken we de DM-knoop via LSM-lateralen. We nemen deze stappen:</p> <ol> <li>We kijken of er LSM-lateralen van het juist district liggen in het gebied van de LSW</li> <li>We kijken aan welke unieke DM-knopen deze lateralen zijn verbonden. We verbinden de LSW met al deze districten</li> </ol>"},{"location":"notebooks/bouw_lhm_topology/#4-koppelen-lsw-aan-dichtsbijzijnde-dm-knoop","title":"4. Koppelen LSW aan dichtsbijzijnde DM-knoop\u00b6","text":"<p>Als uiterste mogelijkheid koppelen we LSW-knopen aan de meest dichtbijzijnde DM-knoop die voorkomt in de DM-keys</p>"},{"location":"notebooks/bouw_lhm_topology/#resultaat","title":"Resultaat\u00b6","text":"<p>In de kaart hieronder zie je het resultaat</p>"}]}